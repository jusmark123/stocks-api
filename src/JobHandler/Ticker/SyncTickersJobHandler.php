<?php

/*
 * Stocks Api
 */

declare(strict_types=1);

namespace App\JobHandler\Ticker;

use App\Constants\Transport\JobConstants;
use App\Constants\Transport\Queue;
use App\Entity\Job;
use App\Entity\JobDataItem;
use App\Exception\EmptyJobDataException;
use App\JobHandler\AbstractJobHandler;
use App\MessageClient\ClientPublisher\ClientPublisher;
use App\MessageClient\Protocol\MessageFactory;
use App\Service\Brokerage\BrokerageServiceProvider;
use App\Service\Brokerage\PolygonBrokerageService;
use App\Service\JobService;
use App\Service\TickerService;
use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

/**
 * Class SyncTickersJobHandler.
 */
class SyncTickersJobHandler extends AbstractJobHandler
{
    const JOB_NAME = 'sync-tickers';
    const JOB_DESCRIPTION = 'Sync tickers from polygon.io';
    const HEADERS = [
        Queue::SYSTEM_PUBLISHER_HEADER_NAME => Queue::SYSTEM_PUBLISHER_NAME,
        JobConstants::REQUEST_HEADER_NAME => self::JOB_NAME,
    ];

    /**
     * @var PolygonBrokerageService
     */
    private $polygonService;

    /**
     * @var TickerService
     */
    private $tickerService;

    /**
     * SyncOrderHistoryJobHandler constructor.
     *
     * @param BrokerageServiceProvider $brokerageProvider
     * @param EventDispatcherInterface $dispatcher
     * @param JobService               $jobService
     * @param LoggerInterface          $logger
     * @param MessageFactory           $messageFactory
     * @param ClientPublisher          $publisher
     * @param TickerService            $tickerService
     */
    public function __construct(
        BrokerageServiceProvider $brokerageProvider,
        EventDispatcherInterface $dispatcher,
        JobService $jobService,
        LoggerInterface $logger,
        MessageFactory $messageFactory,
        PolygonBrokerageService $polygonService,
        ClientPublisher $publisher,
        TickerService $tickerService
    ) {
        $this->polygonService = $polygonService;
        $this->tickerService = $tickerService;
        parent::__construct($dispatcher, $jobService, $logger, $messageFactory, $publisher);
    }

    /**
     * @param string      $jobName
     * @param string|null $resourceClass
     *
     * @return bool
     */
    public function supports(string $jobName, ?string $resourceClass = null): bool
    {
        return false;
    }

    /**
     * @param Job              $job
     * @param JobDataItem|null $jobData
     *
     * @throws \App\Exception\InvalidJobDataItemException
     *
     * @return bool
     */
    public function execute(JobDataItem $jobData, Job $job)
    {
        return parent::execute($jobData, $job); // TODO: Change the autogenerated stub
    }

    /**
     * @param Job $job
     *
     * @return bool|mixed
     */
    public function prepare(Job $job)
    {
        $jobData = $job->getJobData();

        if (null === $jobData || empty($jobData)) {
            throw new EmptyJobDataException();
        }

        foreach ($jobData as $jobDataItem) {
            $packet = $this->messageFactory->createPacket(
                Queue::TICKERS_PERSISTENT_ROUTING_KEY,
                serialize($jobDataItem),
                self::HEADERS
            );
            $this->publisher->publish($packet);
        }
    }
}
